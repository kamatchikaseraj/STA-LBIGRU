from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from imblearn.over_sampling import SMOTE
from sklearn.utils import shuffle

def CNN_SMOTE(X_train, y_train, k=1):
    X_train_resampled, y_train_resampled = X_train.copy(), y_train.copy()
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train_resampled, y_train_resampled)

    # Start the Condensed Nearest Neighbor algorithm
    condense_indices = []
    for i, x in enumerate(X_train_resampled):
        if knn.predict([x]) != y_train_resampled[i]:
            condense_indices.append(i)

    # Remove misclassified instances
    X_train_resampled = np.delete(X_train_resampled, condense_indices, axis=0)
    y_train_resampled = np.delete(y_train_resampled, condense_indices, axis=0)

    # Apply SMOTE to the condensed dataset
    smote = SMOTE(sampling_strategy='minority')
    X_train_resampled, y_train_resampled = smote.fit_resample(X_train_resampled, y_train_resampled)
    
    return X_train_resampled, y_train_resampled

# Example usage
X, y = make_classification(n_classes=2, class_sep=2, weights=[0.1, 0.9], n_informative=3, n_redundant=0, flip_y=0, n_features=20, n_clusters_per_class=1, n_samples=1000, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train_resampled, y_train_resampled = CNN_SMOTE(X_train, y_train, k=1)

print("Original dataset shape:", X_train.shape, y_train.shape)
print("Resampled dataset shape:", X_train_resampled.shape, y_train_resampled.shape)
